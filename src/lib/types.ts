/* eslint-disable */
/* tslint:disable */
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface App {
  id?: string
  name?: string
  organization?: Organization
  status?: string
}

export interface CheckStatus {
  name?: string
  output?: string
  status?: string
  updated_at?: string
}

export interface CreateAppRequest {
  app_name?: string
  enable_subdomains?: boolean
  network?: string
  org_slug?: string
}

export interface CreateLeaseRequest {
  description?: string
  /** seconds lease will be valid */
  ttl?: number
}

export interface CreateMachineRequest {
  /** An object defining the Machine configuration */
  config?: FlyMachineConfig
  lease_ttl?: number
  lsvd?: boolean
  /** Unique name for this Machine. If omitted, one is generated for you */
  name?: string
  /** The target region. Omitting this param launches in the same region as your WireGuard peer connection (somewhere near you). */
  region?: string
  skip_launch?: boolean
  skip_service_registration?: boolean
}

/** Optional parameters */
export interface CreateOIDCTokenRequest {
  /** @example "https://fly.io/org-slug" */
  aud?: string
}

export interface CreateVolumeRequest {
  compute?: FlyMachineGuest
  compute_image?: string
  encrypted?: boolean
  fstype?: string
  machines_only?: boolean
  name?: string
  region?: string
  require_unique_zone?: boolean
  size_gb?: number
  /** restore from snapshot */
  snapshot_id?: string
  snapshot_retention?: number
  /** fork from remote volume */
  source_volume_id?: string
}

export interface ErrorResponse {
  /** Deprecated */
  details?: any
  error?: string
  status?: MainStatusCode
}

export interface ExtendVolumeRequest {
  size_gb?: number
}

export interface ExtendVolumeResponse {
  needs_restart?: boolean
  volume?: Volume
}

export interface ImageRef {
  digest?: string
  labels?: Record<string, string>
  registry?: string
  repository?: string
  tag?: string
}

export interface Lease {
  /** Description or reason for the Lease. */
  description?: string
  /** ExpiresAt is the unix timestamp in UTC to denote when the Lease will no longer be valid. */
  expires_at?: number
  /** Nonce is the unique ID autogenerated and associated with the Lease. */
  nonce?: string
  /** Owner is the user identifier which acquired the Lease. */
  owner?: string
  /** Machine version */
  version?: string
}

export interface ListApp {
  id?: string
  machine_count?: number
  name?: string
  network?: any
}

export interface ListAppsResponse {
  apps?: ListApp[]
  total_apps?: number
}

export interface ListenSocket {
  address?: string
  proto?: string
}

export interface Machine {
  checks?: CheckStatus[]
  config?: FlyMachineConfig
  created_at?: string
  events?: MachineEvent[]
  host_status?: MachineHostStatusEnum
  id?: string
  image_ref?: ImageRef
  incomplete_config?: FlyMachineConfig
  /** InstanceID is unique for each version of the machine */
  instance_id?: string
  name?: string
  /** Nonce is only every returned on machine creation if a lease_duration was provided. */
  nonce?: string
  /** PrivateIP is the internal 6PN address of the machine. */
  private_ip?: string
  region?: string
  state?: string
  updated_at?: string
}

export interface MachineEvent {
  id?: string
  request?: any
  source?: string
  status?: string
  timestamp?: number
  type?: string
}

export interface MachineExecRequest {
  /** Deprecated: use Command instead */
  cmd?: string
  command?: string[]
  timeout?: number
}

export interface MachineVersion {
  user_config?: FlyMachineConfig
  version?: string
}

export interface Organization {
  name?: string
  slug?: string
}

export interface ProcessStat {
  command?: string
  cpu?: number
  directory?: string
  listen_sockets?: ListenSocket[]
  pid?: number
  rss?: number
  rtime?: number
  stime?: number
}

export interface SignalRequest {
  signal?: SignalRequestSignalEnum
}

export interface StopRequest {
  signal?: string
  timeout?: FlyDuration
}

export interface UpdateMachineRequest {
  /** An object defining the Machine configuration */
  config?: FlyMachineConfig
  current_version?: string
  lease_ttl?: number
  lsvd?: boolean
  /** Unique name for this Machine. If omitted, one is generated for you */
  name?: string
  /** The target region. Omitting this param launches in the same region as your WireGuard peer connection (somewhere near you). */
  region?: string
  skip_launch?: boolean
  skip_service_registration?: boolean
}

export interface UpdateVolumeRequest {
  auto_backup_enabled?: boolean
  snapshot_retention?: number
}

export interface Volume {
  attached_alloc_id?: string
  attached_machine_id?: string
  auto_backup_enabled?: boolean
  block_size?: number
  blocks?: number
  blocks_avail?: number
  blocks_free?: number
  created_at?: string
  encrypted?: boolean
  fstype?: string
  host_status?: VolumeHostStatusEnum
  id?: string
  name?: string
  region?: string
  size_gb?: number
  snapshot_retention?: number
  state?: string
  zone?: string
}

export interface VolumeSnapshot {
  created_at?: string
  digest?: string
  id?: string
  retention_days?: number
  size?: number
  status?: string
}

export interface FlyDNSConfig {
  dns_forward_rules?: FlyDnsForwardRule[]
  hostname?: string
  hostname_fqdn?: string
  nameservers?: string[]
  options?: FlyDnsOption[]
  searches?: string[]
  skip_registration?: boolean
}

export type FlyDuration = string

/** EnvVar defines an environment variable to be populated from a machine field, env_var */
export interface FlyEnvFrom {
  /**
   * EnvVar is required and is the name of the environment variable that will be set from the
   * secret. It must be a valid environment variable name.
   */
  env_var?: string
  /** FieldRef selects a field of the Machine: supports id, version, app_name, private_ip, region, image. */
  field_ref?: FlyEnvFromFieldRefEnum
}

/** A file that will be written to the Machine. One of RawValue or SecretName must be set. */
export interface FlyFile {
  /**
   * GuestPath is the path on the machine where the file will be written and must be an absolute path.
   * For example: /full/path/to/file.json
   */
  guest_path?: string
  /** The base64 encoded string of the file contents. */
  raw_value?: string
  /** The name of the secret that contains the base64 encoded file contents. */
  secret_name?: string
}

export interface FlyHTTPOptions {
  compress?: boolean
  h2_backend?: boolean
  headers_read_timeout?: number
  idle_timeout?: number
  response?: FlyHTTPResponseOptions
}

export interface FlyHTTPResponseOptions {
  headers?: Record<string, any>
  pristine?: boolean
}

/** An optional object that defines one or more named checks. The key for each check is the check name. */
export interface FlyMachineCheck {
  /** The time to wait after a VM starts before checking its health */
  grace_period?: FlyDuration
  headers?: FlyMachineHTTPHeader[]
  /** The time between connectivity checks */
  interval?: FlyDuration
  /** For http checks, the HTTP method to use to when making the request */
  method?: string
  /** For http checks, the path to send the request to */
  path?: string
  /** The port to connect to, often the same as internal_port */
  port?: number
  /** For http checks, whether to use http or https */
  protocol?: string
  /** The maximum time a connection can take before being reported as failing its health check */
  timeout?: FlyDuration
  /** If the protocol is https, the hostname to use for TLS certificate validation */
  tls_server_name?: string
  /** For http checks with https protocol, whether or not to verify the TLS certificate */
  tls_skip_verify?: boolean
  /** tcp or http */
  type?: string
}

export interface FlyMachineConfig {
  /** Optional boolean telling the Machine to destroy itself once itâ€™s complete (default false) */
  auto_destroy?: boolean
  checks?: Record<string, FlyMachineCheck>
  /** Deprecated: use Service.Autostart instead */
  disable_machine_autostart?: boolean
  dns?: FlyDNSConfig
  /** An object filled with key/value pairs to be set as environment variables */
  env?: Record<string, string>
  files?: FlyFile[]
  guest?: FlyMachineGuest
  /** The docker image to run */
  image?: string
  init?: FlyMachineInit
  metadata?: Record<string, string>
  metrics?: FlyMachineMetrics
  mounts?: FlyMachineMount[]
  processes?: FlyMachineProcess[]
  /** The Machine restart policy defines whether and how flyd restarts a Machine after its main process exits. See https://fly.io/docs/machines/guides-examples/machine-restart-policy/. */
  restart?: FlyMachineRestart
  schedule?: string
  services?: FlyMachineService[]
  /** Deprecated: use Guest instead */
  size?: string
  /**
   * Standbys enable a machine to be a standby for another. In the event of a hardware failure,
   * the standby machine will be started.
   */
  standbys?: string[]
  statics?: FlyStatic[]
  stop_config?: FlyStopConfig
}

export interface FlyMachineGuest {
  cpu_kind?: string
  cpus?: number
  gpu_kind?: string
  gpus?: number
  host_dedication_id?: string
  kernel_args?: string[]
  memory_mb?: number
}

/** For http checks, an array of objects with string field Name and array of strings field Values. The key/value pairs specify header and header values that will get passed with the check call. */
export interface FlyMachineHTTPHeader {
  /** The header name */
  name?: string
  /** The header value */
  values?: string[]
}

export interface FlyMachineInit {
  cmd?: string[]
  entrypoint?: string[]
  exec?: string[]
  kernel_args?: string[]
  swap_size_mb?: number
  tty?: boolean
}

export interface FlyMachineMetrics {
  path?: string
  port?: number
}

export interface FlyMachineMount {
  add_size_gb?: number
  encrypted?: boolean
  extend_threshold_percent?: number
  name?: string
  path?: string
  size_gb?: number
  size_gb_limit?: number
  volume?: string
}

export interface FlyMachinePort {
  end_port?: number
  force_https?: boolean
  handlers?: string[]
  http_options?: FlyHTTPOptions
  port?: number
  proxy_proto_options?: FlyProxyProtoOptions
  start_port?: number
  tls_options?: FlyTLSOptions
}

export interface FlyMachineProcess {
  cmd?: string[]
  entrypoint?: string[]
  env?: Record<string, string>
  /** EnvFrom can be provided to set environment variables from machine fields. */
  env_from?: FlyEnvFrom[]
  exec?: string[]
  /**
   * IgnoreAppSecrets can be set to true to ignore the secrets for the App the Machine belongs to
   * and only use the secrets provided at the process level. The default/legacy behavior is to use
   * the secrets provided at the App level.
   */
  ignore_app_secrets?: boolean
  /**
   * Secrets can be provided at the process level to explicitly indicate which secrets should be
   * used for the process. If not provided, the secrets provided at the machine level will be used.
   */
  secrets?: FlyMachineSecret[]
  user?: string
}

/** The Machine restart policy defines whether and how flyd restarts a Machine after its main process exits. See https://fly.io/docs/machines/guides-examples/machine-restart-policy/. */
export interface FlyMachineRestart {
  /** When policy is on-failure, the maximum number of times to attempt to restart the Machine before letting it stop. */
  max_retries?: number
  /**
   * * no - Never try to restart a Machine automatically when its main process exits, whether thatâ€™s on purpose or on a crash.
   * * always - Always restart a Machine automatically and never let it enter a stopped state, even when the main process exits cleanly.
   * * on-failure - Try up to MaxRetries times to automatically restart the Machine if it exits with a non-zero exit code. Default when no explicit policy is set, and for Machines with schedules.
   */
  policy?: FlyMachineRestartPolicyEnum
}

/** A Secret needing to be set in the environment of the Machine. env_var is required */
export interface FlyMachineSecret {
  /**
   * EnvVar is required and is the name of the environment variable that will be set from the
   * secret. It must be a valid environment variable name.
   */
  env_var?: string
  /**
   * Name is optional and when provided is used to reference a secret name where the EnvVar is
   * different from what was set as the secret name.
   */
  name?: string
}

export interface FlyMachineService {
  autostart?: boolean
  /**
   * Accepts a string (new format) or a boolean (old format). For backward compatibility with older clients, the API continues to use booleans for "off" and "stop" in responses.
   * * "off" or false - Do not autostop the Machine.
   * * "stop" or true - Automatically stop the Machine.
   * * "suspend" - Automatically suspend the Machine, falling back to a full stop if this is not possible.
   */
  autostop?: FlyMachineServiceAutostopEnum
  checks?: FlyMachineCheck[]
  concurrency?: FlyMachineServiceConcurrency
  force_instance_description?: string
  force_instance_key?: string
  internal_port?: number
  min_machines_running?: number
  ports?: FlyMachinePort[]
  protocol?: string
}

export interface FlyMachineServiceConcurrency {
  hard_limit?: number
  soft_limit?: number
  type?: string
}

export interface FlyProxyProtoOptions {
  version?: string
}

export interface FlyStatic {
  guest_path: string
  index_document?: string
  tigris_bucket?: string
  url_prefix: string
}

export interface FlyStopConfig {
  signal?: string
  timeout?: FlyDuration
}

export interface FlyTLSOptions {
  alpn?: string[]
  default_self_signed?: boolean
  versions?: string[]
}

export interface FlyDnsForwardRule {
  addr?: string
  basename?: string
}

export interface FlyDnsOption {
  name?: string
  value?: string
}

export interface Flydv1ExecResponse {
  exit_code?: number
  exit_signal?: number
  stderr?: string
  stdout?: string
}

export enum MainStatusCode {
  Unknown = 'unknown',
  CapacityErr = 'insufficient_capacity',
}

export enum MachineHostStatusEnum {
  Ok = 'ok',
  Unknown = 'unknown',
  Unreachable = 'unreachable',
}

export enum SignalRequestSignalEnum {
  SIGABRT = 'SIGABRT',
  SIGALRM = 'SIGALRM',
  SIGFPE = 'SIGFPE',
  SIGHUP = 'SIGHUP',
  SIGILL = 'SIGILL',
  SIGINT = 'SIGINT',
  SIGKILL = 'SIGKILL',
  SIGPIPE = 'SIGPIPE',
  SIGQUIT = 'SIGQUIT',
  SIGSEGV = 'SIGSEGV',
  SIGTERM = 'SIGTERM',
  SIGTRAP = 'SIGTRAP',
  SIGUSR1 = 'SIGUSR1',
}

export enum VolumeHostStatusEnum {
  Ok = 'ok',
  Unknown = 'unknown',
  Unreachable = 'unreachable',
}

export enum FlyDurationTimeDurationEnum {
  MinDuration = -9223372036854776000,
  MaxDuration = 9223372036854776000,
  Nanosecond = 1,
  Microsecond = 1000,
  Millisecond = 1000000,
  Second = 1000000000,
  Minute = 60000000000,
  Hour = 3600000000000,
  MinDuration1 = -9223372036854776000,
  MaxDuration2 = 9223372036854776000,
  Nanosecond3 = 1,
  Microsecond4 = 1000,
  Millisecond5 = 1000000,
  Second6 = 1000000000,
  Minute7 = 60000000000,
  Hour8 = 3600000000000,
}

/** FieldRef selects a field of the Machine: supports id, version, app_name, private_ip, region, image. */
export enum FlyEnvFromFieldRefEnum {
  Id = 'id',
  Version = 'version',
  AppName = 'app_name',
  PrivateIp = 'private_ip',
  Region = 'region',
  Image = 'image',
}

/**
 * * no - Never try to restart a Machine automatically when its main process exits, whether thatâ€™s on purpose or on a crash.
 * * always - Always restart a Machine automatically and never let it enter a stopped state, even when the main process exits cleanly.
 * * on-failure - Try up to MaxRetries times to automatically restart the Machine if it exits with a non-zero exit code. Default when no explicit policy is set, and for Machines with schedules.
 */
export enum FlyMachineRestartPolicyEnum {
  No = 'no',
  Always = 'always',
  OnFailure = 'on-failure',
}

/**
 * Accepts a string (new format) or a boolean (old format). For backward compatibility with older clients, the API continues to use booleans for "off" and "stop" in responses.
 * * "off" or false - Do not autostop the Machine.
 * * "stop" or true - Automatically stop the Machine.
 * * "suspend" - Automatically suspend the Machine, falling back to a full stop if this is not possible.
 */
export enum FlyMachineServiceAutostopEnum {
  Off = 'off',
  Stop = 'stop',
  Suspend = 'suspend',
}

export interface AppsListParams {
  /** The org slug, or 'personal', to filter apps */
  org_slug: string
}

export interface MachinesListParams {
  /** Include deleted machines */
  include_deleted?: boolean
  /** Region filter */
  region?: string
  /** Fly App Name */
  appName: string
}

export interface MachinesDeleteParams {
  /** Force kill the machine if it's running */
  force?: boolean
  /** Fly App Name */
  appName: string
  /** Machine ID */
  machineId: string
}

export interface MachinesListProcessesParams {
  /** Sort by */
  sort_by?: string
  /** Order */
  order?: string
  /** Fly App Name */
  appName: string
  /** Machine ID */
  machineId: string
}

export interface MachinesRestartParams {
  /** Restart timeout as a Go duration string or number of seconds */
  timeout?: string
  /** Unix signal name */
  signal?: string
  /** Fly App Name */
  appName: string
  /** Machine ID */
  machineId: string
}

export interface MachinesWaitParams {
  /** 26-character Machine version ID */
  instance_id?: string
  /** wait timeout. default 60s */
  timeout?: number
  /** desired state */
  state?: StateEnum
  /** Fly App Name */
  appName: string
  /** Machine ID */
  machineId: string
}

/** desired state */
export enum StateEnum {
  Started = 'started',
  Stopped = 'stopped',
  Suspended = 'suspended',
  Destroyed = 'destroyed',
}

/** desired state */
export enum MachinesWaitParams1StateEnum {
  Started = 'started',
  Stopped = 'stopped',
  Suspended = 'suspended',
  Destroyed = 'destroyed',
}
